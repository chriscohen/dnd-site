type Query {
    attackTypes: [AttackType!]! @all

    campaignSetting(slug: String! @eq): CampaignSetting @find
    campaignSettings: [CampaignSetting!]! @all @orderBy(column: "name", direction: ASC)

    category(slug: String! @eq): Category @find
    categories: [Category!]! @all

    company(slug: String! @eq): Company @find
    companies: [Company!]! @all

    item(slug: String! @eq): Item @find
    items: [Item!]! @all @orderBy(column: "name", direction: ASC)

    magicSchools: [MagicSchool!]! @all

    source(slug: String! @eq): Source @find
    sources: [Source!]! @all @orderBy(column: "game_edition", direction: DESC)

    spell(slug: String! @eq): Spell @find
    spells: [Spell!]! @all

    spellComponentType(id: String! @eq): SpellComponentType @find
    spellComponentTypes: [SpellComponentType!]! @all
}

type AttackType {
    id: String!
    name: String!
}

type CampaignSetting {
    id: Uuid!
    slug: String!
    name: String!
    short_name: String!
    publisher: Company! @hasOne
    publication_type: String!
    logo: Media @belongsTo
}

type Category {
    id: Uuid!
    slug: String!
    name: String!
    entity_type: String!
    parent: Category
    image: Media @hasOne
}

type Company {
    id: String!
    slug: String!
    name: String!
    logo: Media @belongsTo
    product_url: String
    short_name: String
    website: String
}

type Damage {
    damage_type: DamageType! @belongsTo
}

type DamageType {
    id: String!
    name: String!
}

type Item {
    id: Uuid!
    slug: String!
    name: String!
    category: Category @belongsTo
    editions: [ItemEdition] @hasMany
}

type ItemEdition {
    id: Uuid!
    item_id: Uuid!
    game_edition: GameEdition!
    description: String
    price: String
    quantity: Int!
    weight: Float
    source: Source! @belongsTo
}

type MagicSchool {
    id: String!
    name: String!
}

type Media {
    id: Uuid!
    name: String
    filename: String!
    collection_name: String
    mime_type: String
    size: Int
    created_at: String
    updated_at: String
    url: String! @method(name: "getUrl")
}

type ProductId {
    id: Uuid!
    origin: Company!
    product_id: String!
    url: String @method(name: "url")
}

type Source {
    id: Uuid!
    slug: String!
    name: String!
    campaign_setting: CampaignSetting @belongsTo(relation: "campaignSetting")
    cover_image: Media @belongsTo(relation: "coverImage")
    description: String
    editions: [SourceEdition] @hasMany
    game_edition: String
    product_code: String
    product_ids: [ProductId] @hasMany(relation: "productIds")
    publication_type: String!
    publisher: Company @belongsTo
    source_type: String!
}

type SourceEdition {
    id: Uuid!
    name: String!
    binding: String
    formats: [String]! @method(name: "getFormatsAsArray")
    isbn10: String
    isbn13: String
    pages: Int
    release_date: String
    release_date_month_only: Boolean!
    source_id: Uuid!
}

type SourceFormat {
    id: Uuid!
    format: String
}

type SpellMaterialComponent {
    id: String!
    name: String!
}

type SpellComponentType {
    id: String!
    name: String!
}

type Spell {
    id: Uuid!
    slug: String!
    name: String!
    editions: [SpellEdition!]! @hasMany
}

type SpellEdition {
    id: Uuid!
    components: String @method(name: "componentsAsString")
    description: String
    game_edition: String!
    higher_level: String
    is_default: Boolean
    range: String
    range_number: Int
    range_unit: String
    school: String @method(name: "schoolAsString")
}

scalar Uuid
